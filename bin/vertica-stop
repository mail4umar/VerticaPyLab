#!/bin/bash

# this script stops the vertica docker container

# Find the config file
VERTICAPYLAB_PREFIX=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
VERTICAPYLAB_PREFIX=${VERTICAPYLAB_PREFIX%/bin}
CONFIG_FILE=$VERTICAPYLAB_PREFIX/etc/VerticaPyLab.conf
if ! [[ -r $CONFIG_FILE ]]; then
  if ! make -C $VERTICAPYLAB_PREFIX etc/VerticaPyLab.conf || ! [[ -r $CONFIG_FILE ]]; then
    echo "Cannot find config file ($CONFIG_FILE)" >&2
    exit 1
  fi
fi
# Load the configuration
source $CONFIG_FILE || abort $? "Cannot load config file $CONFIG_FILE"

# always forward VSQL_*, but allow for other enviornment variables to be
# specified in VERTICA_ENV_FORWARDING
for var in ${!VSQL_*} $VERTICA_ENV_FORWARD; do
  if [[ ${!var+isset} ]]; then
    VERTICA_ENV+=(-e "$var=${!var}")
  fi
done

# The OSx version of bash calls the M1 chip "arm64", but if someone updates
# /bin/bash, then it will could use "aarch64" in $MACHTYPE
if [[ $MACHTYPE =~ ^aarch64 ]] || [[ $MACHTYPE =~ ^arm64 ]] ; then
  # Arm based macs crash on a memory check unless this is added
  VERTICA_ENV+=(-e VERTICA_MEMDEBUG=2)
fi

# try to stop gracefully
docker exec -i "${VERTICA_ENV[@]}" $VERTICA_CONTAINER_NAME /opt/vertica/bin/admintools -t stop_db --database=$DB_NAME --password= 2>/dev/null

# a polite sledgehammer
docker stop $VERTICA_CONTAINER_NAME
