#!/bin/bash

# this script runs the docker environment and sets up an identical user and
# home directory so it behaves a lot like running vsql in your own directory

# defaults that can be overridden with environment variables.
: ${VERTICA_PORT:=${VSQL_PORT:-5433}}
: ${SSHD_PORT:=5432}
: ${CONTAINER_NAME:=vertica-demo}
: ${HOST_NAME:=$CONTAINER_NAME}
: ${DB_NAME:=demo}
: ${DOCKER_IMAGE:=vertica/vertica-k8s:latest} # see https://hub.docker.com/r/vertica/vertica-k8s

function abort {
  local retval=$1
  shift
  echo "${BASH_SOURCE##*/}: $@" >&2
  exit $retval
}

# allow for enviornment variables to be
# specified in VERTICA_ENV_FORWARDING
for var in $VERTICA_ENV_FORWARD; do
  if [[ ${!var+isset} ]]; then
    VERTICA_ENV+=(-e "$var=${!var}")
  fi
done

# The OSx version of bash calls the M1 chip "arm64", but if someone updates
# /bin/bash, then it will could use "aarch64" in $MACHTYPE
if [[ $MACHTYPE =~ ^aarch64 ]] || [[ $MACHTYPE =~ ^arm64 ]] ; then
  # Arm based macs crash on a memory check unless this is added
  VERTICA_ENV+=(-e VERTICA_MEMDEBUG=2)
  DOCKER_RUNARGS+=(--platform linux/amd64)
fi

DOCKER_RUNARGS+=( -p "$VERTICA_PORT:5433" )
DOCKER_RUNARGS+=( -p "$((VERTICA_PORT+11)):5444" )
DOCKER_RUNARGS+=( -p "$SSHD_PORT:22" )
DOCKER_RUNARGS+=( --name "$CONTAINER_NAME" )
DOCKER_RUNARGS+=( --hostname "$HOST_NAME" )

# mount the home directory unless the user is dbadmin because this docker
# requires files from /home/dbadmin
if [[ $HOME != dbadmin ]] ; then
  DOCKER_RUNARGS+=(--mount "type=bind,source=$HOME,target=$HOME")
fi

# clear out old container in case it had issues
docker container rm $CONTAINER_NAME 2>/dev/null

docker run --detach "${DOCKER_RUNARGS[@]}" "${VERTICA_ENV[@]}" "$DOCKER_IMAGE" || abort $? "Could not create docker"

# user in container should match the home directory
if [[ $OSTYPE == darwin* ]]; then # OSX uses different args for stat
  : ${LOGNAME:=$(stat -f "%Su" "$HOME")} # if LOGNAME is not set, use the owner of the home directory
  : ${LOGGROUP:=$(stat -f "%Sg" "$HOME")}
else
  : ${LOGNAME:=$(stat -c "%U" "$HOME")} # if LOGNAME is not set, use the owner of the home directory
  : ${LOGGROUP:=$(stat -c "%G" "$HOME")}
fi

# determine uid/gid of mounted home directory (in case docker maps to a different id)
: ${USERID:=$(docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME stat -c "%u:%g" "$HOME")}

# If the home directory mount is owned by non-root, make it look like it's
# owned by the actual owner by creating an account within the container.
if [[ $USERID =~ ^[1-9][0-9]*: ]] ; then
  # does host's user exist in docker?  (i.e., dbadmin, ftp, root)
  if ! docker exec -i -u $LOGNAME "${VERTICA_ENV[@]}" $CONTAINER_NAME sudo true >/dev/null 2>&1; then
    # add group if we need to and its safe
    if [[ $LOGGROUP != $(docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME stat -c "%G" "$HOME") ]] && [[ ${USERID#*:} -ge 20 ]] ; then
      # it's optional but nice to see group names correct on files, but don't
      # touch group names in /etc/passwd that are <20.  However, 14 is
      # available, so renumber whatever has ${USERID#*:} to 14 and then add the group
      docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME bash -c 'sudo groupmod -g 14 $(getent group "'"${USERID#*:}"'" | cut -d: -f1) 2>/dev/null' # change gid of group
    fi
    docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME sudo groupadd --gid "${USERID#*:}" "$LOGGROUP"

    # make a host user to match home directory ownership
    docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME sudo useradd --uid "${USERID%%:*}" --gid "${USERID#*:}" --home-dir "$HOME" --no-create-home "$LOGNAME" || abort $? "Could not create user $LOGNAME ($USERID)"
  fi

  # add user to sudoers
  docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME sudo bash -c "echo '$LOGNAME ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers" || abort $? "Could not give $LOGNAME sudo access"
fi

# this allows ssh commands to succeed
docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME sudo bash -c 'echo "LANG=en_US.UTF-8" >> /etc/environment'

# a temporary fix to allow restarts of the docker container
docker exec -i "${VERTICA_ENV[@]}" $CONTAINER_NAME sed -i.bak 's/\(cp.*\)/\1 || true/' /opt/vertica/bin/docker-entrypoint.sh

# create the database
docker exec -i "${VERTICA_ENV[@]}" "$CONTAINER_NAME" opt/vertica/bin/admintools -t create_db --database="$DB_NAME" --password= --hosts=localhost || exit $?
