#!/bin/bash
# Copyright 2023 Open Text

# this script sets up a docker container with an ML development environment

# Find the config file
VERTICAPYLAB_PREFIX=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
VERTICAPYLAB_PREFIX=${VERTICAPYLAB_PREFIX%/bin}
CONFIG_FILE=$VERTICAPYLAB_PREFIX/etc/VerticaPyLab.conf
BIN=$VERTICAPYLAB_PREFIX/bin
WORKSPACE=$VERTICAPYLAB_PREFIX/project
WORKSPACE_ENABLEMENT=$VERTICAPYLAB_PREFIX/docker-verticapy/enablement
if ! [[ -r $CONFIG_FILE ]]; then
  if ! make -C $VERTICAPYLAB_PREFIX etc/VerticaPyLab.conf || ! [[ -r $CONFIG_FILE ]]; then
    echo "Cannot find config file ($CONFIG_FILE)" >&2
    exit 1
  fi
fi
# Load the configuration
source $CONFIG_FILE || abort $? "Cannot load config file $CONFIG_FILE"

function usage {
    echo "usage: $0 [-h] [-c <container>][-i <image>] [-p <port>]"
    echo
    echo "Options:"
    echo "  -i <image> The name of the image to use for the demo (Default: $VERTICAPYLAB_IMG)"
    echo "  -v <image version> The version of the image to use for the demo (Default: $VERTICAPYLAB_IMG_VERSION)"
    echo "  -c <container> The name you want the container to have to use (Default: $VERTICAPYLAB_CONTAINER_NAME)"
    echo "  -p <port>  Port to use to run jupyterlab (Default: $VERTICAPYLAB_PORT)"
    echo
    exit 1
}

while getopts "p:c:v:i:h" opt; do
    case ${opt} in
        h)
            usage
            ;;
        i)
            VERTICAPYLAB_IMG=$OPTARG
            ;;
        v)
            VERTICAPYLAB_IMG_VERSION=$OPTARG
            ;;
        p)
            VERTICAPYLAB_PORT=$OPTARG
            ;;
        c)
            VERTICAPYLAB_CONTAINER_NAME=$OPTARG
            ;;
        *)
            echo "Unknown option: -${opt}"
            usage
            ;;
    esac
done

# Get the basic URL and remap the hostname and port
if  [[ $VERTICAPYLAB_BIND_ADDRESS == 0.0.0.0 ]]; then
  url_host=$(hostname)
else
  url_host="$VERTICAPYLAB_BIND_ADDRESS"
fi

function openURL() {
  container=$1
  host=$2
  URL=$(docker logs "$container" 2>&1 | grep -Eo 'http[s]?://[0-9.]+:8888/.*' | head -n 1 | sed "s/[0-9.]*:8888/$host:$VERTICAPYLAB_PORT/")
  # This checks the kernel name to set the correct command to open the link in browser,
  # because Linux systems will use xdg-open while MacOs will use open
  if [[ $OSTYPE == darwin* ]]; then # OSX uses different args for stat
    OPEN_CMD=open
  elif [[ $(uname -r) =~ WSL ]]; then
    OPEN_CMD="$BIN/open"
  else
    OPEN_CMD=xdg-open
  fi
  # Open the correct url in browser. We know that the correct url is the second one.
  # So even if in some cases a 3rd one is created this will not be affected
  echo
  echo "Waiting for url to open in browser..."
  $OPEN_CMD "$URL" 2> /dev/null
  if [[ $? -eq 0 ]]; then
    echo
    echo "If the link does not open or does not work, copy and paste this URL in browser:"
  else
    echo
    echo "Copy and paste this URL in browser:"
  fi
  echo "    $URL"
}

# If the container already exists, open the url in the browser
if docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" true 2>/dev/null; then
  echo "$VERTICAPYLAB_CONTAINER_NAME is already running"
  openURL $VERTICAPYLAB_CONTAINER_NAME $url_host
  exit 0
fi

if [[ $(tr '[:lower:]' '[:upper:]'<<< ${TEST_MODE}) == "YES" ]] ; then
  VERTICAPYLAB_IMG_VERSION=$VERSION
fi

VERTICAPYLAB_RUNARGS+=( -v $WORKSPACE:/project )
VERTICAPYLAB_RUNARGS+=( -v $WORKSPACE_ENABLEMENT:/project/demos/enablement:ro )

if [[ -n $DOCKER_HOST ]] && [[ $VERTICAPYLAB_BIND_ADDRESS == 127.0.0.1 ]]; then
  # Try to support docker-machine networking
  VERTICAPYLAB_BIND_ADDRESS=${DOCKER_HOST##tcp://}
  VERTICAPYLAB_BIND_ADDRESS=${VERTICAPYLAB_BIND_ADDRESS%%:*}
fi

if [[ $VERTICAPYLAB_PORT =~ ^[0-9]*$ ]] ; then
  VERTICAPYLAB_RUNARGS+=( -p $VERTICAPYLAB_BIND_ADDRESS:$VERTICAPYLAB_PORT:8888 )
else
  echo "Warning: VERTICAPYLAB_PORT must be numeric.  Using a random port." >&2
  VERTICAPYLAB_RUNARGS+=( --expose 8888 -P )
fi
VERTICAPYLAB_RUNARGS+=( --hostname "$VERTICAPYLAB_CONTAINER_NAME" )
VERTICAPYLAB_RUNARGS+=( --name "$VERTICAPYLAB_CONTAINER_NAME" )
VERTICAPYLAB_RUNARGS+=( --rm )

# Use a network just for this demo
docker network create "$DOCKER_NETWORK" 2>/dev/null
VERTICAPYLAB_RUNARGS+=( --network "$DOCKER_NETWORK" )

docker run --detach "${VERTICAPYLAB_RUNARGS[@]}" "opentext/$VERTICAPYLAB_IMG:$VERTICAPYLAB_IMG_VERSION" || exit $?

VERTICAPYLAB_PORT=$(docker port "$VERTICAPYLAB_CONTAINER_NAME" 8888/tcp)
VERTICAPYLAB_PORT=${VERTICAPYLAB_PORT##*:}

# if VerticaPyLab is running
if docker exec -i "$VERTICA_CONTAINER_NAME" true 2>/dev/null; then
  # copy dbadmin@$VERTICA_HOST_NAME credentials to root@$VERTICAPYLAB_CONTAINER_NAME to enable ssh
  docker exec -i "$VERTICA_CONTAINER_NAME" bash -c "cd; tar -zcf - .ssh" | docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" bash -c "cd; tar -zxf -"
fi

# if we can get the ip address of the $VERTICA_HOST_NAME then add a hosts entry
if HOSTS_ADD=$(docker network inspect -f '{{range .Containers}}{{if (ne .Name "'"$VERTICAPYLAB_CONTAINER_NAME"'")}}{{index (split .IPv4Address "/") 0}}        {{.Name}}{{println}}{{end}}{{end}}' "$DOCKER_NETWORK"); then 
  HOSTS_START=$(docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" grep -v $VERTICA_HOST_NAME /etc/hosts)
  if [[ $VERTICA_HOST_NAME != verticadb ]] ; then
    # so "ssh verticadb" works no matter what you call your demo container
    HOSTS_ADD=$(echo "$HOSTS_ADD" | sed "s/$VERTICA_CONTAINER_NAME/$VERTICA_CONTAINER_NAME verticadb/")
    SSH_CONFIG_EXTRA_HOSTNAME="VerticaPyLab"
  fi
  # add docker containers and host ip address to /etc/hosts
  printf "%s\n" "$HOSTS_START" "$HOSTS_ADD" | docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" tee /etc/hosts > /dev/null
else
  echo "Warning: Cannot determine ip address of VerticaPyLab container" >&2
fi

# write a .ssh/config
# tweak some settings to disable the fingerprint warnings
echo "# ssh config generated by verticapylab script
Host *
    GlobalKnownHostsFile=/dev/nulls
    UserKnownHostsFile=/dev/null
    UpdateHostKeys=no
    StrictHostKeyChecking=no
    LogLevel=error
    RequestTTY=yes

Host $VERTICA_HOST_NAME $SSH_CONFIG_EXTRA_HOSTNAME
    User dbadmin
" | docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" bash -c 'umask 077; mkdir -p $HOME/.ssh; cat >> $HOME/.ssh/config'


# Try to ping Google's DNS server
ping -c 1 8.8.8.8 &> /dev/null

# Check if the ping was successful. Then update VerticaPy.
if [ $? -eq 0 ]; then
  echo "Internet connection is active."
  
  trap 'if [ -n "$TERM" ] && tput setaf 1 &>/dev/null; then tput setaf 1; fi; echo "VerticaPy update failed"; if [ -n "$TERM" ] && tput sgr0 &>/dev/null; then tput sgr0; fi; exit 1' EXIT

  echo "Installing Git"
  if docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" bash -c 'apt-get update -yqq; apt-get install -yqq git 1> /dev/null' 2> /dev/null; then
    echo "Git installed!"
  else
    docker stop "$VERTICAPYLAB_CONTAINER_NAME"
    exit 1
  fi

  echo "Uninstalling old VerticaPy"
  docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" pip uninstall --yes verticapy 2> /dev/null 

  echo "Installing latest VerticaPy"
  if docker exec -i "$VERTICAPYLAB_CONTAINER_NAME" pip install -q git+https://github.com/vertica/VerticaPy 2> /dev/null; then
    echo "Installation done!"
  else
    docker stop "$VERTICAPYLAB_CONTAINER_NAME"
    exit 1
  fi

  # Disable the trap as the installation was successful
  trap - EXIT

  tput setaf 2
  echo "VerticaPy updated successfully"
  tput sgr0
else
  echo "No internet connection. Skipping VerticaPy update."
fi

echo "Starting..."
# sleep some time to wait for jupyterlab logs
timeout=10 #seconds
while ! docker logs -n 5 "$VERTICAPYLAB_CONTAINER_NAME" 2>&1 | grep 'Or copy and paste one of these URLs:' >/dev/null && ((timeout--)); do
  sleep 1
done

openURL $VERTICAPYLAB_CONTAINER_NAME $url_host
